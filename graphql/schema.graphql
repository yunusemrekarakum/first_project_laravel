scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Query {
    user: User @field(resolver: "App\\GraphQL\\Mutations\\User@get_user")
    categories: [Category!]!
    category(id: ID!): Category
    products: [Product!]!
        @field(resolver: "App\\GraphQL\\Mutations\\Product@list_product")
    EditListProduct(id: ID!): Product
        @field(resolver: "App\\GraphQL\\Mutations\\Product@product_list_edit")
    SearchProducts(
        category: String
        color: String
        features: String
        min_price: Int
        max_price: Int
        sort: String
        page: Int!
        perPage: Int!
    ): SearchProductsResult
        @field(
            resolver: "App\\GraphQL\\Resolvers\\SearchProducts@SearchProducts"
        )
}
type SearchProductsResult {
    results: [Product]
    currentPage: Int!
    lastPage: Int!
    total: Int!
}

type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    profile_image: String
    created_at: DateTime!
    updated_at: DateTime!
}

type Admin {
    id: ID!
    user_name: String!
    name_surname: String!
    profile_image: String
    created_at: DateTime!
    updated_at: DateTime!
}

type Mutation {
    userLogin(email: String!, password: String!): AuthPayload
        @field(resolver: "App\\GraphQL\\Mutations\\User@login")
    adminLogout: LogoutPayload
    updateUser(
        name: String
        email: String
        password: String
        old_password: String
        profile_image: Upload
    ): User @field(resolver: "App\\GraphQL\\Mutations\\User@user_edit")
    createUser(name: String, email: String, password: String): AuthPayload
        @field(resolver: "App\\GraphQL\\Mutations\\User@user_create")
    AddCategories(title: String!): Category
        @field(resolver: "App\\GraphQL\\Mutations\\Category@add_category")
    DeleteCategories(id: ID!): String
        @field(resolver: "App\\GraphQL\\Mutations\\Category@delete_category")
    EditCategories(id: ID!, title: String!): Category
        @field(resolver: "App\\GraphQL\\Mutations\\Category@edit_category")
    EditListCategory(id: ID!): Category
        @field(resolver: "App\\GraphQL\\Mutations\\Category@edit_list_category")
    AddProduct(
        title: String!
        category_id: ID!
        image_path: Upload
        price: String!
        features: String!
        colors: String!
    ): Product @field(resolver: "App\\GraphQL\\Mutations\\Product@product_add")
    DeleteProduct(id: ID!): String
        @field(resolver: "App\\GraphQL\\Mutations\\Product@product_delete")
    EditProduct(
        id: ID!
        title: String
        category_id: ID
        image_path: Upload
        price: String
        features: String
        colors: String
    ): Product @field(resolver: "App\\GraphQL\\Mutations\\Product@product_edit")
}

type AuthPayload {
    token: String!
    user: User
}
type LogoutPayload {
    success: Boolean!
}
type Category {
    id: ID!
    title: String!
    created_at: String
    updated_at: String
    products: [Product!]!
}
type Product {
    id: ID
    title: String!
    category_id: ID!
    image_path: Upload!
    image_path: String
    price: String!
    features: String!
    colors: String!
    created_at: String
    updated_at: String
    category: Category!
}
