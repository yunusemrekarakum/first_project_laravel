scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Query {
    user(
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find
    users(
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
    admin: Admin @field(resolver: "App\\GraphQL\\Resolvers\\AdminResolver@getAdmin")
    categories: [Category!]!
    category(id: ID!):Category
}
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

type Admin {
    id: ID!
    user_name: String!
    name_surname: String!
    profile_image: String
    created_at: DateTime!
    updated_at: DateTime!
}

type Mutation {
    adminLogin(user_name: String!, password: String!): AuthPayload
    adminLogout: LogoutPayload
    updateAdmin(
        name_surname: String,
        user_name: String,
        password: String,
        old_password: String
        profile_image: Upload
    ): Admin @field(resolver: "App\\GraphQL\\Resolvers\\AdminResolver@updateAdmin")
    AddCategories (title: String!): Category @field(resolver: "App\\GraphQL\\Mutations\\Category@add_category")
    DeleteCategories(id: ID!): String @field(resolver: "App\\GraphQL\\Mutations\\Category@delete_category")
    EditCategories(id: ID!, title: String!): Category @field(resolver: "App\\GraphQL\\Mutations\\Category@edit_category")
    EditListCategory(id: ID!): Category @field (resolver: "App\\GraphQL\\Mutations\\Category@edit_list_category")
}

type AuthPayload {
    token: String!
    admin: Admin
}
type LogoutPayload {
    success: Boolean!
}
type Category {
    id: ID!
    title: String!
    created_at: String
    updated_at: String
}
